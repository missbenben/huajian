self.onmessage = function (e) {
    var category;
    var cateInfo = JSON.parse(e.data);
    var url = cateInfo.url;
    var formData = new FormData();
    formData.append('ProjectID', cateInfo.ProjectID);
    formData.append('ModelID', cateInfo.ModelID);
    formData.append('VersionNO', cateInfo.VersionNO);
    formData.append('Levels', cateInfo.Levels);
    formData.append('BaseViewID', cateInfo.BaseViewID);
    formData.append('CategoryID', cateInfo.CategoryID);
    postJSON(url, formData).then(function (data) {
        var geoCategory = [];
        var elementMesh = [];
        var rawCategory = JSON.parse(data);
        for (var _i = 0, _a = rawCategory.Blocks; _i < _a.length; _i++) {
            var block = _a[_i];
            var ctm = block.Content.toString();
            var ctmArr = decode(ctm);
            var geo = {
                blockId: block.ID,
                content: ctmArr,
            };
            geoCategory.push(geo);
        }
        var category = {
            modelIdAndViewId: cateInfo.ModelID + '^' + cateInfo.BaseViewID,
            geometries: geoCategory,
            batchName: rawCategory.BatchName,
            elements: rawCategory.Elements
        };
        data = null;
        var msg = { obj: category };
        self.postMessage(msg);
    });
};
function postJSON(_url, _formData) {
    return new Promise(function (resolve, reject) {
        var request = new XMLHttpRequest();
        request.open('POST', _url, true);
        request.onreadystatechange = function () {
            if (this.readyState === 4 && (this.status === 200 || this.status === 0)) {
                try {
                    if (request.responseText.indexOf('schemas.microsoft.com') >= 0) {
                        var parser = new DOMParser();
                        var resultDoc = parser.parseFromString(request.responseText, 'text/xml');
                        var resText = request.responseText.split('Serialization/">')[1].split('</string')[0];
                        resolve(resText);
                    }
                    else {
                        resolve(request.responseText);
                    }
                }
                catch (e) {
                    reject({
                        e: e,
                        url: _url
                    });
                }
            }
        };
        request.send(_formData);
    });
}
function Str2Bytes(str) {
    var pos = 0;
    var len = str.length;
    if (len % 2 !== 0) {
        return null;
    }
    len /= 2;
    var hexA = new Array();
    for (var i = 0; i < len; i++) {
        var s = str.substr(pos, 2);
        var v = parseInt(s, 16);
        hexA.push(v);
        pos += 2;
    }
    return hexA;
}
function decode(input) {
    var _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    var output = '';
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
    while (i < input.length) {
        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));
        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;
        output = output + String.fromCharCode(chr1);
        if (enc3 !== 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 !== 64) {
            output = output + String.fromCharCode(chr3);
        }
    }
    return output;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
